

CREATE DATABASE GestaoEnergia;
USE GestaoEnergia;

-- CRIAÇÃO TABELAS

-- Usuario
CREATE TABLE Usuario (
    idUsuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    cpf VARCHAR2(11) UNIQUE NOT NULL,
    senha VARCHAR2(50) NOT NULL
);

-- Endereco
CREATE TABLE Endereco (
    idEndereco NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    logradouro VARCHAR2(255) NOT NULL,
    numero NUMBER NOT NULL,
    cidade VARCHAR2(100) NOT NULL,
    estado VARCHAR2(2) NOT NULL,
    cep VARCHAR2(8) NOT NULL,
    idUsuario NUMBER NOT NULL,
    CONSTRAINT fk_idUsuario FOREIGN KEY (idUsuario) REFERENCES Usuario(idUsuario)
);

-- Consumo
CREATE TABLE Consumo (
    idConsumo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    menorConsumo FLOAT NOT NULL,
    maiorConsumo FLOAT NOT NULL,
    totalConsumo FLOAT NOT NULL,
    dataInicial DATE NOT NULL,
    dataFinal DATE NOT NULL,
    idUsuario NUMBER NOT NULL,
    CONSTRAINT fk_consumo_idUsuario FOREIGN KEY (idUsuario) REFERENCES Usuario(idUsuario)
);


-- ItemConsumo
CREATE TABLE ItemConsumo (
    idItemConsumo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mes DATE NOT NULL,
    consumoUnidade FLOAT NOT NULL,
    valorFatura FLOAT NOT NULL,
    pago NUMBER(1) DEFAULT 0, -- BOOLEAN is simulated using NUMBER(1) (0 = FALSE, 1 = TRUE)
    idConsumo NUMBER NOT NULL,
    CONSTRAINT fk_idConsumo FOREIGN KEY (idConsumo) REFERENCES Consumo(idConsumo)
);


-- ProvedorEnergia
CREATE TABLE ProvedorEnergia (
    idProvedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    estado VARCHAR2(2) NOT NULL
);

-- HorarioPico
CREATE TABLE HorarioPico (
    idHorarioPico NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    horaInicio TIMESTAMP NOT NULL,
    horaFim TIMESTAMP NOT NULL,
    idProvedor NUMBER NOT NULL,
    CONSTRAINT fk_idProvedor FOREIGN KEY (idProvedor) REFERENCES ProvedorEnergia(idProvedor)
);


-- Tarifa
CREATE TABLE Tarifa (
    idTarifa NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data DATE NOT NULL,
    idProvedor NUMBER NOT NULL,
    CONSTRAINT fk_tarifa_idProvedor FOREIGN KEY (idProvedor) REFERENCES ProvedorEnergia(idProvedor)
);


-- TarifaItem
CREATE TABLE TarifaItem (
    idTarifaItem NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hora TIMESTAMP NOT NULL,
    preco FLOAT NOT NULL,
    idTarifa NUMBER NOT NULL,
    CONSTRAINT fk_tarifaitem_idTarifa FOREIGN KEY (idTarifa) REFERENCES Tarifa(idTarifa)
);



-- Inserção de Dados Iniciais


-- Dados da tabela Usuario
INSERT INTO Usuario (nome, cpf, senha) VALUES ('João Silva', '12345678901', 'senha123');
INSERT INTO Usuario (nome, cpf, senha) VALUES ('Maria Oliveira', '98765432100', 'senha456');


-- Dados da tabela Endereco
INSERT INTO Endereco (logradouro, numero, cidade, estado, cep, idUsuario)
VALUES ('Rua A', 123, 'São Paulo', 'SP', '01001000', 1);

INSERT INTO Endereco (logradouro, numero, cidade, estado, cep, idUsuario)
VALUES ('Avenida B', 456, 'Rio de Janeiro', 'RJ', '22020001', 2);


-- Dados da tabela ProvedorEnergia
INSERT INTO ProvedorEnergia (nome, estado) VALUES ('Energisa', 'SP');
INSERT INTO ProvedorEnergia (nome, estado) VALUES ('Light', 'RJ');


-- Dados da tabela Consumo
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-01-31', 'YYYY-MM-DD'), 1 FROM DUAL;
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-02-28', 'YYYY-MM-DD'), 1 FROM DUAL;
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-03-31', 'YYYY-MM-DD'), 1 FROM DUAL;
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-04-30', 'YYYY-MM-DD'), 1 FROM DUAL;
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-05-01', 'YYYY-MM-DD'), TO_DATE('2024-05-31', 'YYYY-MM-DD'), 1 FROM DUAL;
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-06-30', 'YYYY-MM-DD'), 1 FROM DUAL;
INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 10.5, 50.0, 200.0, TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-07-31', 'YYYY-MM-DD'), 1 FROM DUAL;

INSERT INTO Consumo (menorConsumo, maiorConsumo, totalConsumo, dataInicial, dataFinal, idUsuario)
SELECT 5.0, 30.0, 100.0, TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-02-28', 'YYYY-MM-DD'), 2 FROM DUAL;


-- Dados da tabela ItemConsumo
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-01-15', 'YYYY-MM-DD'), 20.0, 150.0, 1, 1);
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-02-15', 'YYYY-MM-DD'), 150.0, 370.0, 1, 1);
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-03-15', 'YYYY-MM-DD'), 200.0, 460.0, 1, 1);
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-04-15', 'YYYY-MM-DD'), 60.0, 240.0, 1, 1);
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-05-15', 'YYYY-MM-DD'), 70.0, 270.0, 1, 1);
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-06-15', 'YYYY-MM-DD'), 180.0, 400.0, 1, 1);
INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-07-15', 'YYYY-MM-DD'), 90.0, 290.0, 1, 1);

INSERT INTO ItemConsumo (mes, consumoUnidade, valorFatura, pago, idConsumo)
VALUES (TO_DATE('2024-02-20', 'YYYY-MM-DD'), 10.0, 80.0, 0, 2);


-- Dados da tabela HorarioPico
INSERT INTO HorarioPico (horaInicio, horaFim, idProvedor)
VALUES (TO_TIMESTAMP('18:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('21:00:00', 'HH24:MI:SS'), 1);

INSERT INTO HorarioPico (horaInicio, horaFim, idProvedor)
VALUES (TO_TIMESTAMP('17:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('20:00:00', 'HH24:MI:SS'), 2);


-- Dados da tabela Tarifa
INSERT INTO Tarifa (data, idProvedor)
VALUES (TO_DATE('2024-01-01', 'YYYY-MM-DD'), 1);

INSERT INTO Tarifa (data, idProvedor)
VALUES (TO_DATE('2024-02-01', 'YYYY-MM-DD'), 2);


-- Dados da tabela TarifaItem
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('00:00:00', 'HH24:MI:SS'), 1.0, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('01:00:00', 'HH24:MI:SS'), 0.9, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('02:00:00', 'HH24:MI:SS'), 0.8, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('03:00:00', 'HH24:MI:SS'), 0.8, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('04:00:00', 'HH24:MI:SS'), 0.7, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('05:00:00', 'HH24:MI:SS'), 0.8, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('06:00:00', 'HH24:MI:SS'), 0.9, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('07:00:00', 'HH24:MI:SS'), 1.0, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('08:00:00', 'HH24:MI:SS'), 1.1, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('09:00:00', 'HH24:MI:SS'), 1.1, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('10:00:00', 'HH24:MI:SS'), 0.5, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('11:00:00', 'HH24:MI:SS'), 0.6, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('12:00:00', 'HH24:MI:SS'), 0.9, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('13:00:00', 'HH24:MI:SS'), 1.1, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), 1.2, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('15:00:00', 'HH24:MI:SS'), 1.3, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('16:00:00', 'HH24:MI:SS'), 1.4, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('17:00:00', 'HH24:MI:SS'), 1.5, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('18:00:00', 'HH24:MI:SS'), 1.6, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('19:00:00', 'HH24:MI:SS'), 1.7, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('20:00:00', 'HH24:MI:SS'), 1.7, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('21:00:00', 'HH24:MI:SS'), 1.7, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'), 1.0, 1);
INSERT INTO TarifaItem (hora, preco, idTarifa)
VALUES (TO_TIMESTAMP('23:00:00', 'HH24:MI:SS'), 0.5, 1);
commit


-- Atualização de dados
UPDATE Usuario
SET senha = SHA2(senha, 256)
WHERE LENGTH(senha) < 64; 


-- Exclusão de dados
DELETE FROM ItemConsumo WHERE idItemConsumo = 2;



--  Consulta de Empresas Disponíveis por Estado
CREATE OR REPLACE PROCEDURE ConsultaEmpresasDisponiveisPorEstado(
    estadoInput IN VARCHAR2, 
    empresa OUT VARCHAR2
) IS
BEGIN
    -- Retrieve the first matching company name
    SELECT p.nome
    INTO empresa
    FROM Endereco e
    JOIN ProvedorEnergia p ON e.estado = p.estado
    WHERE e.estado = estadoInput
    FETCH FIRST ROW ONLY;  -- Ensure only one result is returned
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        empresa := NULL;  -- Handle the case when no company is found
END;

DECLARE
    v_empresa VARCHAR2(100);  -- Variable to store the output
BEGIN
    -- Call the stored procedure and pass the variable for the OUT parameter
    ConsultaEmpresasDisponiveisPorEstado('SP', v_empresa);
    
    -- Output the result (in this case, print it)
    DBMS_OUTPUT.PUT_LINE('Empresa: ' || v_empresa);
END;

--  Consulta de Preços por Hora para um Provedor
-- Retorna o valor do Watt por hora de acordo com o provedor selecionado
CREATE OR REPLACE PROCEDURE ConsultaPrecosPorHora (nomeProvedor IN VARCHAR2, precoCursor OUT SYS_REFCURSOR) IS
BEGIN
    OPEN precoCursor FOR
        SELECT ti.hora AS Hora, ti.preco AS Preco
        FROM TarifaItem ti
        JOIN Tarifa t ON ti.idTarifa = t.idTarifa
        JOIN ProvedorEnergia p ON t.idProvedor = p.idProvedor
        WHERE p.nome = nomeProvedor;
END;

-- This should be done outside the PL/SQL block, in SQL*Plus or SQLcl:
SET SERVEROUTPUT ON;

DECLARE
    precoCursor SYS_REFCURSOR;
    hora TIMESTAMP;  -- Change to TIMESTAMP to store the value returned
    preco NUMBER;    -- Change to NUMBER to handle FLOAT as NUMBER
BEGIN
    -- Call the procedure with an input and output parameter (cursor)
    ConsultaPrecosPorHora('Energisa', precoCursor);

    -- Fetch data from the cursor and print it
    LOOP
        FETCH precoCursor INTO hora, preco;
        EXIT WHEN precoCursor%NOTFOUND;
        
        -- Print the formatted result
        DBMS_OUTPUT.PUT_LINE('Hora: ' || TO_CHAR(hora, 'HH24:MI:SS') || ', Preço: ' || TO_CHAR(preco, '9999999.99'));
    END LOOP;

    -- Close the cursor
    CLOSE precoCursor;
END;



--  Detalhes de Consumo de Energia de um Cliente
-- Retorna os dados de consumo de um cliente com base no CPF e senha fornecidos

SET SERVEROUTPUT ON;  -- Enable the DBMS_OUTPUT


CREATE OR REPLACE PROCEDURE DetalhesConsumoCliente(
    cpfInput IN VARCHAR2,
    senhaInput IN VARCHAR2,
    consumoCursor OUT SYS_REFCURSOR  -- Return a cursor
) IS
BEGIN
    OPEN consumoCursor FOR
        SELECT c.menorConsumo AS Menor_Consumo,
               c.maiorConsumo AS Maior_Consumo,
               c.totalConsumo AS Total_Consumo,
               ic.mes AS Mes,
               ic.consumoUnidade AS Consumo_Unidade,
               ic.valorFatura AS Valor_Fatura,
               ic.pago AS Pago
        FROM Usuario u
        JOIN Consumo c ON u.idUsuario = c.idUsuario
        JOIN ItemConsumo ic ON c.idConsumo = ic.idConsumo
        WHERE u.cpf = cpfInput AND u.senha = senhaInput;
END;




DECLARE
    consumoCursor SYS_REFCURSOR;
    menorConsumo NUMBER;
    maiorConsumo NUMBER;
    totalConsumo NUMBER;
    mes DATE;  -- Keep as DATE
    consumoUnidade NUMBER;
    valorFatura NUMBER;
    pago CHAR(1);  -- Change BOOLEAN to CHAR(1) for true/false or 'Y'/'N'
BEGIN
    -- Call the procedure and get the cursor
    DetalhesConsumoCliente('12345678901', 'senha123', consumoCursor);

    -- Fetch data from the cursor
    LOOP
        FETCH consumoCursor INTO menorConsumo, maiorConsumo, totalConsumo, mes, consumoUnidade, valorFatura, pago;
        EXIT WHEN consumoCursor%NOTFOUND;
        
        -- Handle pago as CHAR(1), assuming 'Y' = true, 'N' = false
        DBMS_OUTPUT.PUT_LINE('Menor Consumo: ' || menorConsumo ||
                             ', Maior Consumo: ' || maiorConsumo ||
                             ', Total Consumo: ' || totalConsumo ||
                             ', Mês: ' || TO_CHAR(mes, 'YYYY-MM-DD') ||
                             ', Consumo Unidade: ' || consumoUnidade ||
                             ', Valor Fatura: ' || valorFatura ||
                             ', Foi Pago: ' || CASE WHEN pago = 'Y' THEN 'Sim' ELSE 'Não' END);
    END LOOP;

    -- Close the cursor
    CLOSE consumoCursor;
END;




